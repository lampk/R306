% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_fit_methods.R
\name{fit.method}
\alias{fit.method}
\alias{fit.method.lm}
\alias{fit.method.lm.step.AIC}
\alias{fit.method.lm.step.BIC}
\alias{fit.method.glm}
\alias{fit.method.glm.step.AIC}
\alias{fit.method.stab.step.AIC}
\alias{fit.method.glm.step.BIC}
\alias{fit.method.glm.step}
\alias{fit.method.cox}
\alias{fit.method.cox.step.AIC}
\alias{fit.method.cox.step.BIC}
\alias{fit.method.cox.step}
\alias{fit.method.coxtv}
\alias{fit.method.coxtv.step}
\alias{fit.method.glmnet}
\alias{fit.method.glmnet.cv}
\alias{fit.method.glmnet.boot}
\alias{fit.method.penalized}
\alias{fit.method.alasso}
\alias{fit.method.scad}
\alias{fit.method.stability}
\alias{fit.method.gam}
\alias{fit.method.rpart1}
\alias{fit.method.rpart2}
\alias{fit.method.randomForest}
\alias{fit.method.gbm}
\alias{fit.method.glm.glmulti.AIC}
\alias{fit.method.glm.glmulti.BIC}
\alias{fit.method.cox.glmulti.AIC}
\alias{fit.method.cox.glmulti.BIC}
\alias{fit.method.glm.glmulti}
\alias{fit.method.cox.glmulti}
\title{Methods to fit models}
\usage{
fit.method(model, data, type = c("lm", "glm", "glm.step.AIC", "glm.step.BIC",
  "glm.best.AIC", "glm.best.BIC", "gam", "glmnet", "glmnet.1se", "glmnet.cv",
  "glmnet.boot", "adaptiveLASSO", "SCAD", "penalized", "stability",
  "stability.step.AIC", "cox", "cox.step.AIC", "cox.step.BIC", "cox.best.AIC",
  "cox.best.BIC", "glmnet.cox1", "glmnet.cox2", "rpart1", "rpart2",
  "randomForest", "gbm", "gbm.cox", "coxtv", "coxtv.step.AIC",
  "coxtv.step.BIC"), pi = 0.8, rep = 100, size = 0.5, seed = NULL,
  parallel = FALSE, ...)

fit.method.lm(model, data, ...)

fit.method.lm.step.AIC(model, data, ...)

fit.method.lm.step.BIC(model, data, ...)

fit.method.glm(model, data, ...)

fit.method.glm.step.AIC(model, data, ...)

fit.method.stab.step.AIC(model, data, pi = 0.8, B = 100, size = 0.5,
  seed = NULL, parallel = FALSE, ...)

fit.method.glm.step.BIC(model, data, ...)

fit.method.glm.step(model, data, ...)

fit.method.cox(model, data, ...)

fit.method.cox.step.AIC(model, data, ...)

fit.method.cox.step.BIC(model, data, ...)

fit.method.cox.step(model, data, ...)

fit.method.coxtv(model, data, ...)

fit.method.coxtv.step(model, data, ...)

fit.method.glmnet(model, data, family = "binomial", lambda = NULL,
  nfolds = 10, type.measure = "deviance", standardize = TRUE, alpha = 1,
  ...)

fit.method.glmnet.cv(model, data, family = "binomial", lambda = NULL,
  refit = TRUE, nfolds = 10, type.measure = "deviance",
  standardize = TRUE, alpha = 1, krepeat = 10, nse = 1, nlambda = 100,
  lambda.min.ratio = 1e-04, ...)

fit.method.glmnet.boot(model, data, family = "binomial", lambda = NULL,
  refit = TRUE, B = 10, type.measure = "deviance", standardize = TRUE,
  alpha = 1, krepeat = 10, nse = 1, nlambda = 100,
  lambda.min.ratio = 1e-04, ...)

fit.method.penalized(model, data, ...)

fit.method.alasso(model, data, family = "binomial", lambda = NULL,
  nfolds = 10, type.measure = "deviance", standardize = TRUE, alpha = 1,
  ...)

fit.method.scad(model, data, family = "binomial", penalty = "SCAD",
  gamma = 3.7, alpha = 1, lambda.min = 0.001, nlambda = 100)

fit.method.stability(model, data, size = 0.632, steps = 100, weakness = 1,
  error = 0.05, pi_thr = 0.6, error.type = "pfer", family = "binomial",
  standardize = TRUE, intercept = TRUE, alpha = 1, ...)

fit.method.gam(model, data, family = "binomial", ...)

fit.method.rpart1(model, data, ...)

fit.method.rpart2(model, data, method = "anova",
  control = rpart.control(minsplit = 20, xval = 10, cp = 0), ...)

fit.method.randomForest(model, data, ntree = 500, ...)

fit.method.gbm(model, data, distribution = "bernoulli", cv.folds = 10,
  n.trees = 3000, interaction.depth = 2, verbose = FALSE,
  shrinkage = 0.001, n.cores = 1, ...)

fit.method.glm.glmulti.AIC(model, data, ...)

fit.method.glm.glmulti.BIC(model, data, ...)

fit.method.cox.glmulti.AIC(model, data, ...)

fit.method.cox.glmulti.BIC(model, data, ...)

fit.method.glm.glmulti(model, data, ...)

fit.method.cox.glmulti(model, data, ...)
}
\arguments{
\item{model}{Model formula to fit}

\item{data}{Data to fit model}

\item{...}{Other arguments}
}
\value{
fitted model
}
\description{
Methods to fit models
}
\section{Functions}{
\itemize{
\item \code{fit.method.lm}: Linear regression

\item \code{fit.method.lm.step.AIC}: Linear regression with stepwise variable selection using AIC as stopping rule

\item \code{fit.method.lm.step.BIC}: Linear regression with stepwise variable selection using BIC as stopping rule

\item \code{fit.method.glm}: Logistic regression

\item \code{fit.method.glm.step.AIC}: Logistic regression with stepwise variable selection using AIC as stopping rule

\item \code{fit.method.stab.step.AIC}: Logistic regression with stepwise variable selection using AIC as stopping rule + stability selection

\item \code{fit.method.glm.step.BIC}: Logistic regression with stepwise variable selection using BIC as stopping rule

\item \code{fit.method.glm.step}: Logistic regression with stepwise variable selection

\item \code{fit.method.cox}: Cox regression

\item \code{fit.method.cox.step.AIC}: Cox regression with stepwise variable selection using AIC as stopping rule

\item \code{fit.method.cox.step.BIC}: Cox regression with stepwise variable selection using BIC as stopping rule

\item \code{fit.method.cox.step}: Cox regression with stepwise variable selection

\item \code{fit.method.coxtv}: Cox regression with time-dependent variable

\item \code{fit.method.coxtv.step}: Cox regression with time-dependent variable using stepwise variable selection

\item \code{fit.method.glmnet}: Logistic regression with LASSO (using glmnet)

\item \code{fit.method.glmnet.cv}: Logistic regression with LASSO (using glmnet) and refit (only for logistic regression)

\item \code{fit.method.glmnet.boot}: Logistic regression with LASSO (using glmnet) and refit (only for logistic regression) ## use bootstrap

\item \code{fit.method.penalized}: Logistic regression with LASSO (using penalized)

\item \code{fit.method.alasso}: Logistic regression with adaptive LASSO

\item \code{fit.method.scad}: Logistic regression with SCAD

\item \code{fit.method.stability}: GLM LASSO with stability selection

\item \code{fit.method.gam}: GAM Logistic regression

\item \code{fit.method.rpart1}: CART: build and prune tree at the same time

\item \code{fit.method.rpart2}: CART: build, then prune tree

\item \code{fit.method.randomForest}: Random forest

\item \code{fit.method.gbm}: GLM Boosting

\item \code{fit.method.glm.glmulti.AIC}: Logistic regression with best subset using AIC as criterion

\item \code{fit.method.glm.glmulti.BIC}: Logistic regression with best subset using BIC as criterion

\item \code{fit.method.cox.glmulti.AIC}: Cox regression with best subset using AIC as criterion

\item \code{fit.method.cox.glmulti.BIC}: Cox regression with best subset using BIC as criterion

\item \code{fit.method.glm.glmulti}: Logistic regression with best subset

\item \code{fit.method.cox.glmulti}: Cox regression with best subset
}}

